#!/bin/bash
set -e

PREFIX=$(pwd)/local
USE_OPENCV=0
BUILD_TESTS=0
BUILD_BENCHMARKS=0
HAVE_CUDA=0
VERBOSE=0

if [ $(find /usr/include/cuda_runtime.h | wc -l) -gt 0 ]; then
    HAVE_CUDA=1
fi

parse_args() {
    for i in "$@"; do
        case $i in
        --prefix=*)
            PREFIX="${i#*=}"
            ;;
        --use-opencv)
            USE_OPENCV=1
            ;;
        --tests)
            BUILD_TESTS=1
            ;;
        --no-tests)
            BUILD_TESTS=0
            ;;
        --benchmarks)
            BUILD_BENCHMARKS=1
            ;;
        --no-benchmarks)
            BUILD_BENCHMARKS=0
            ;;
        --no-cuda)
            HAVE_CUDA=0
            ;;
        --verbose)
            VERBOSE=1
            ;;
        *)
            echo "unknown argument $i"
            exit 1
            ;;
        esac
    done
}

CMAKE_FLAGS=

add_cmake_flag() {
    echo "usinig $1=$2"
    CMAKE_FLAGS="${CMAKE_FLAGS} -D$1=$2"
}

pass_cmake_flag_from_env() {
    local name=$1
    local env_key=$2
    if [ -z ${env_key} ]; then
        env_key=$name
    fi
    local val=$(eval echo \$$env_key)
    if [ ! -z "$val" ]; then
        add_cmake_flag $name $val
    fi
}

add_cmake_flags() {
    if [ ${BUILD_TESTS} -eq 1 ]; then
        pass_cmake_flag_from_env GTEST_GIT_URL
    fi
    if [ ${BUILD_BENCHMARKS} -eq 1 ]; then
        pass_cmake_flag_from_env GBENCH_GIT_URL
    fi

    add_cmake_flag CMAKE_INSTALL_PREFIX ${PREFIX}
    add_cmake_flag USE_OPENCV ${USE_OPENCV}
    add_cmake_flag BUILD_TESTS ${BUILD_TESTS}
    add_cmake_flag BUILD_BENCHMARKS ${BUILD_BENCHMARKS}
    add_cmake_flag HAVE_CUDA ${HAVE_CUDA}

    add_cmake_flag CMAKE_RUNTIME_OUTPUT_DIRECTORY $(pwd)/bin
    add_cmake_flag LIBRARY_OUTPUT_PATH $(pwd)/lib # TODO: upgrade to CMAKE_LIBRARY_OUTPUT_DIRECTORY

    add_cmake_flag CMAKE_EXPORT_COMPILE_COMMANDS ${VERBOSE}

    # add_cmake_flag BUILD_DOCS 1
}

main() {
    parse_args $@
    add_cmake_flags

    echo "Using CMAKE_FLAGS=${CMAKE_FLAGS}"
    cmake . ${CMAKE_FLAGS}
}

main $@
