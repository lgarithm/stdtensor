#pragma once
#include <ttl/bits/std_tensor.hpp>

namespace ttl
{
template <typename R, internal::rank_t r>
using tensor = internal::basic_tensor<R, r>;

template <typename R, internal::rank_t r>
using tensor_ref = internal::basic_tensor_ref<R, r>;

template <typename R, internal::rank_t r>
using tensor_view = internal::basic_tensor_view<R, r>;
}  // namespace ttl

namespace ttl
{
// Don't be confused with std::vector
template <typename R> using vector = tensor<R, 1>;
template <typename R> using vector_ref = tensor_ref<R, 1>;
template <typename R> using vector_view = tensor_view<R, 1>;

template <typename R> using matrix = tensor<R, 2>;
template <typename R> using matrix_ref = tensor_ref<R, 2>;
template <typename R> using matrix_view = tensor_view<R, 2>;
}  // namespace ttl

#include <ttl/bits/std_flat_tensor.hpp>

namespace ttl
{
namespace experimental
{
template <typename R> using flat_tensor = internal::basic_flat_tensor<R>;

template <typename R>
using flat_tensor_ref = internal::basic_flat_tensor_ref<R>;

template <typename R>
using flat_tensor_view = internal::basic_flat_tensor_view<R>;
}  // namespace experimental
}  // namespace ttl

#include <experimental/type_encoder>
#include <ttl/bits/std_raw_tensor.hpp>
#include <ttl/bits/std_scalar_type_encoding.hpp>

namespace ttl
{
namespace experimental
{
using raw_tensor = internal::basic_raw_tensor<
    std::experimental::basic_type_encoder<internal::idx_format::encoding>>;
}
}  // namespace ttl
