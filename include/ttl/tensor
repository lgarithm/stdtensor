// # -*- mode: c++ -*-
#pragma once
#include <ttl/bits/std_tensor.hpp>
#include <ttl/shape>

namespace ttl
{
template <typename R, rank_t r> using tensor = internal::basic_tensor<R, r>;

template <typename R, rank_t r>
using tensor_ref = internal::basic_tensor_ref<R, r>;

template <typename R, rank_t r>
using tensor_view = internal::basic_tensor_view<R, r>;

namespace internal
{
template <typename R, rank_t r, typename S>
basic_tensor_view<R, r, S> view(const basic_tensor<R, r, S> &t)
{
    return basic_tensor_view<R, r, S>(t);
}

template <typename R, rank_t r, typename S>
basic_tensor_view<R, r, S> view(const basic_tensor_ref<R, r, S> &t)
{
    return basic_tensor_view<R, r, S>(t);
}
}  // namespace internal
}  // namespace ttl

namespace ttl
{
// Don't be confused with std::vector
template <typename R> using vector = tensor<R, 1>;
template <typename R> using vector_ref = tensor_ref<R, 1>;
template <typename R> using vector_view = tensor_view<R, 1>;

template <typename R> using matrix = tensor<R, 2>;
template <typename R> using matrix_ref = tensor_ref<R, 2>;
template <typename R> using matrix_view = tensor_view<R, 2>;
}  // namespace ttl
