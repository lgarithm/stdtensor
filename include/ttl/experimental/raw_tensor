// # -*- mode: c++ -*-
#pragma once
#include <experimental/type_encoder>
#include <ttl/bits/std_raw_tensor.hpp>
#include <ttl/bits/std_scalar_type_encoding.hpp>

namespace ttl
{
namespace experimental
{
using raw_tensor = internal::basic_raw_tensor_own<
    std::experimental::basic_type_encoder<internal::idx_format::encoding>>;

using raw_tensor_ref = internal::basic_raw_tensor_ref<
    std::experimental::basic_type_encoder<internal::idx_format::encoding>>;

using raw_tensor_view = internal::basic_raw_tensor_view<
    std::experimental::basic_type_encoder<internal::idx_format::encoding>>;

template <typename T>
raw_tensor_ref raw_ref(const T &t)
{
    using ref_t =
        internal::basic_host_tensor_ref<typename T::value_type, T::rank,
                                        typename T::shape_type::dimension_type>;
    return raw_tensor_ref(ref_t(t));
}

template <typename T>
raw_tensor_view raw_view(const T &t)
{
    using view_t = internal::basic_host_tensor_view<
        typename T::value_type, T::rank,
        typename T::shape_type::dimension_type>;
    return raw_tensor_view(view_t(t));
}
}  // namespace experimental
}  // namespace ttl
